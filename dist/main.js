(()=>{"use strict";class r{constructor(){}twoSum(r,t){for(var e=0;e<r.length-1;e++)for(var o=0;o<r.length;o++)if(e!=o&&r[e]+r[o]===t)return[e,o];return[]}fibonacci(r){return r<2?r:this.fibonacci(r-1)+this.fibonacci(r-2)}}class t{constructor(){}findDuplicate(r){var t={};for(let e of r){if(t[e])return e;t[e]=1}return-1}}class e{initiate(r){if(0==r.length)return[];if(1==r.length)return r[0];let t=r.length-1,e=r[0].length-1;return this.spiral(0,[],r,t,e)}spiral(r,t,e,o,i){if(0==o&&0==i)return t;for(let s=r;s<=o;s++)t=this.left(t,e[s],s,i),t=this.down(t,e,s+1,i,o),t=this.right(t,e[o-s],i-1,s),t=this.up(t,e,s+1,s,o),i-=1;return t}addEntry(r,t){return!t&&0!=t||-1!==r.indexOf(t)||(r.push(t),console.log("Added Entry: ",t)),r}left(r,t,e,o){for(let i=e;i<=o;i++)r=this.addEntry(r,t[i]);return r}right(r,t,e,o){e<0&&(e=0);for(let i=e;i>=o;i--)r=this.addEntry(r,t[i]);return r}down(r,t,e,o,i){for(let s=e;s<=i;s++)r=this.addEntry(r,t[s][o]);return r}up(r,t,e,o,i){for(let s=i;s>=e;s--)r=this.addEntry(r,t[s][o]);return r}}class o{constructor(){}buildCache(r){for(var t={},e=0;e<r.length;e++)t[r[e]+""]=e;return t}search(r,t){if(0===r.length)return-1;if(1===r.length&&r[0]==t)return 0;if(1==r.length)return-1;var e=this.buildCache(r);this.sort(r,0,r.length-1);for(var o=0,i=r.length-1,s=Math.floor((i+o)/2);o<=i;){if(r[s]==t)return e[r[s]];r[s]<t?o=s+1:i=s-1,s=Math.floor((i+o)/2)}return-1}sort(r,t,e){if(t<e){var o=Math.floor((e+t)/2);this.sort(r,t,o),this.sort(r,o+1,e),this.merge(r,t,o,e)}}merge(r,t,e,o){for(var i=[],s=[],n=e-t+1,a=o-e,l=0;l<n;l++)i[l]=r[t+l];for(l=0;l<a;l++)s[l]=r[e+1+l];for(var h=0,u=0,c=t;h<n&&u<a;)i[h]<=s[u]?(r[c]=i[h],h++):(r[c]=s[u],u++),c++;for(;h<n;)r[c]=i[h],h++,c++;for(;u<a;)r[c]=s[u],u++,c++}}(new class{constructor(){this.arrayEasyProblems=new r,this.arrayMediumProblems=new t,this.spiralOrder=new e,this.searchRotatedArray=new o}output(){let r=this.arrayEasyProblems.twoSum([2,7,11,15],9);console.log("Two Sum: ",r),r=this.arrayEasyProblems.fibonacci(4),console.log("Fibonacci: ",r),r=this.arrayMediumProblems.findDuplicate([1,3,4,2,2]),console.log("Find Duplicate: ",r),r=this.spiralOrder.initiate([[1,2,3],[4,5,6],[7,8,9]]),console.log("Spiral Order: ",r),r=this.searchRotatedArray.search([4,5,6,7,0,1,2],0),console.log("Search Rotated Array: ",r)}}).output()})();